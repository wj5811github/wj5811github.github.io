CentOS 配置阿里云 yum 源   
Hyper-v内的主机如果要上外网，须先共享到外网网卡上，再开启虚拟机。
因Hyper-v的Default Switch 每次宿主机重启，IP 地址都不一样，随机出来的 ip。因此xshell无法连接虚拟机。
将Hyper-v的Default Switch 共享到可以上外网的网卡上(共享时Default Switch的IP地址会自动变为微软默认的192.168.137.1)
切记：虚拟机需要用旧版网络适配器！！！
建立的虚拟机的网关指向192.168.137.1即可

virtualbox_NAT模式下客户端Xshell链接主机端
网络-高级-端口转发    127.0.0.1  2000  10.0.2.15  22

xshell连接centos虚拟机慢的解决方法：
vim /etc/ssh/sshd_config
:/set nu
找到115行，将UseDNS yes 改为 no 并去掉注释；centos8 124行
保存退出，重启sshd服务：
systemctl restart sshd

(1)CTRL+Z挂起进程并放入后台
(2) jobs 显示当前暂停的进程
(3) bg %N 使第N个任务在后台运行(%前有空格)
(4) fg %N 使第N个任务在前台运行
　　默认bg,fg不带%N时表示对最后一个进程操作!

解决yum安装docker太慢的问题
1、yum install -y yum-utils
2、yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
3、yum install docker-ce

1、确认版本
cat /etc/redhat-release  查看发行版本 CentOS Linux release 7.9.2009 (Core)
uname -r  查看内核版本 3.10.0-1127.el7.x86_64
2、查询网卡名字：
ip addr 或ifconfig
nmcli:查看网络配置
nmcli c reload 命令重启网络服务

3、设置网卡：
cd /etc/sysconfig/network-scripts
4、网卡配置：
vi或vim ifcfg-enp0s3，如ifcfg-网卡名 (ifcfg-enp0s3)
按i进入编辑状态
TYPE="Ethernet"
PROXY_METHOD="none"
BROWSER_ONLY="no"
BOOTPROTO="static"  static dhcp none
DEFROUTE="yes"
IPV4_FAILURE_FATAL="no"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
IPV6_DEFROUTE="yes"
IPV6_FAILURE_FATAL="no"
IPV6_ADDR_GEN_MODE="stable-privacy"
IPV6_PRIVACY="no"
NAME="eth0"
UUID="d4a1b307-870a-455e-a0f7-9afe76d6c295"
DEVICE="eth0"
ONBOOT="yes"
IPADDR="192.168.168.2"
PREFIX="24"  或NETMASK=255.255.255.0
GATEWAY="192168.168.1"  
DNS1="1.2.4.8"
DNS2="210.2.4.8"
按esc 之后按:wq 保存退出
5、重启网卡服务：
cneetos7:systemctl restart network  或 service network restart  
centos8:nmcli c reload +网卡名
通过ifconfig 或ip addr确认IP
6、临时配置IP
如果有ifconfig命令，可以通过ifconfig 网卡名  IP地址  临时配置一个IP
ifconfig enp0s3 192.168.1.100
7、DNS网络配置:
网卡中已配置。此文件可以不配置
刚刚的网卡配置文件，DNS也可以到/etc/resolv.conf
增加nameserver 1.2.4.8
nameserver 210.2.4.8
8、网关配置：
默认网关存储到 /etc/sysconfig/network
查看网关:ip route show
9、重启网卡服务:
cneetos7:systemctl restart network  或 service network restart  
centos8:nmcli c reload +网卡名

开机自启：
vi /etc/rc.local增加
/usr/local/apache/bin/apachectl start

CentOS
yum -y install wget  dnf  yum是dnf的链接
1、备份
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/
CentOS 6
sed -i "s|enabled=1|enabled=0|g" /etc/yum/pluginconf.d/fastestmirror.conf
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
curl -o /etc/yum.repos.d/CentOS-Base.repo https://www.xmpan.com/Centos-6-Vault-Aliyun.repo

CentOS 7
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
或者
curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo

CentOS 8
wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo

3、生成新的缓存
yum makecache

epel 源使用阿里云
centos7
mv  /etc/yum.repos.d/epel.repo   /etc/yum.repos.d/epel.repo.bak
wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
yum clean all
yum makecache

一、安装docker
1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。
通过 uname -r 命令查看你当前的内核版本
 $ uname -r
2、使用 root 权限登录 Centos。确保 yum 包更新到最新。
$ sudo yum update
3、卸载旧版本(如果安装过旧版本的话)
$ sudo yum remove docker  docker-common docker-selinux docker-engine
4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的
$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2
5、设置yum源  推荐aliyun源
$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
或
$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
6、可以查看所有仓库中所有docker版本，并选择特定版本安装
$ yum list docker-ce --showduplicates | sort -r
7、安装docker
$ sudo yum makecache fast
$ sudo yum -y  install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0
$ sudo yum install <FQPN>  # 例如：sudo yum install docker-ce-17.12.0.ce
8、启动并加入开机启动
$ sudo systemctl start docker
$ sudo systemctl enable docker
$ sudo systemctl docker status
9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了)
$ docker version
10、
1. 安装／升级Docker客户端
推荐安装1.10.0以上版本的Docker客户端，参考文档 docker-ce
2. 配置镜像加速器
针对Docker客户端版本大于 1.10.0 的用户
您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://xi4fcgek.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
11、推荐一种删除docker的方法：
yum remove docker docker-common docker-selinux docker-engine -y
/etc/systemd -name '*docker*' -exec rm -f {} ;
find /etc/systemd -name '*docker*' -exec rm -f {} \;
find /lib/systemd -name '*docker*' -exec rm -f {} \;
12、在公司内部采取私服方式拉取镜像：（需要添加配置）
{
   "registry-mirrors":["https://registry.docker-cn.com"],

   "insecure-registries":["ip:port"]
}
重启两个服务：
systemctl daemon-reload
systemctl restart docker

镜像的操作
网址:https://hub.daocloud.io/
拉取
docker pull 镜像名称[:tag]
docker pull daocloud.io/library/tomcat:8.5.15-jre8  地址在daocloud网站复制即可
查看
docker images
删除镜像
docker rmi  镜像
镜像的导入导出
docker save -o 要导出的位置及名称 镜像id
docker save -o /myimages/tomcat8  id
docker load -i 路径/镜像文件  如果镜像id存在则默认使用已存在的镜像
docker load -i/myimages/ tomcat8   
<none>  <none>  b8dfe9ade316  3 years ago   334MB
镜像名称及版本为none需要修改
docker tag id  tomcat:8.5

容器的操作
简单运行：
docker run 镜像名称[:tag]
标准可访问运行：
docker run -d -p 宿主机端口:容器端口 --name 容器名称  -v 路径:容器内路径 镜像名称[:tag]
查看
docker ps [-a -q]  -a 查看全部容器 包括未运行的
查看容器内信息
docker inspect 容器id
查看日志
docker logs -f 容器id  -f 滚动查看日志的最后几行
进入容器内
docker exec -it 容器id  bash  或 /bin/bash
停止容器
docker stop 容器id
docker stop $(docker ps -qa)
启动容器
docker start 容器id
docker start $(docker ps -qa)
删除容器
docker rm 容器id
docker rm $(docker ps -qa)

从宿主机向容器复制文件
docker cp 文件名  容器id:容器内部路径
docker cp ssm.war   fe:/usr/local/tomcat/webapps/

从容器向宿主机复制文件
docker cp 容器id:容器内部路径 宿主机路径
docker cp testtomcat:/usr/local/tomcat/webapps/test/js/test.js   /opt


1、从容器里面拷文件到宿主机
docker cp testtomcat:/usr/local/tomcat/webapps/test/js/test.js   /opt
2、从宿主机拷文件到容器里面  
docker cp /opt/test.js testtomcat fe:/usr/local/tomcat/webapps/test/js
不推荐在容器内部维护修改文件内容，所以需要映射数据卷

退出容器
exit

数据卷的操作
docker volume create tomcat
docker安装时有个数据卷的默认存放路径 /var/lib/docker/volumes/

实例：
docker volume create volume_ssm_tomcat
docker rum -d -p 8080:8080 --name ssm_tomcat -v volume_ssm_tomcat:/usr/local/tomcat/webapps b8
此时在宿主机的/var/lib/docker/volumes/volume_ssm_tomca/_data中
就有了/usr/local/tomcat/webapps中的内容了，因此不需要向容器内部复制文件，
只须把文件放在宿主机的路径下即可，容器内部也会同步。

查看数据卷
docker volume inspect tomcat
docker volume inspect ls   查看全部数据卷

删除数据卷
docker volume rm 数据卷名称

应用数据卷
如果数据卷不存在 docker会自动创建，所以可以直接指定一个路径作为数据卷的存放位置

第一种:docker rum -v 数据卷名称:容器内部的路径 镜像id  此种方式容器会把内部的首页内容映射到宿主机上
docker rum -d -p 8080:8080 --name ssm_tomcat -v volume_ssm_tomcat:/usr/local/tomcat/webapps b8
此时在宿主机的/var/lib/docker/volumes/volume_ssm_tomca/_data中就有了/usr/local/tomcat/webapps中的内容了
因此不需要向容器内部复制文件，只须把文件放在宿主机的路径下即可，容器内部也会同步。

第二种:docker rum -v 路径:容器内部的路径 镜像id  此种方式不会把容器内部的首页内容映射到宿主机上,因为宿主机上的路径不是docker默认的路径，因此不会主动同步
docker rum -d -p 8080:8080 --name ssm_tomcat -v /opt/volume_ssm_tomcat:/usr/local/tomcat/webapps b8
cd /opt/opt/volume_ssm_tomcat 是空的
mkdir ROOT
cd ROOT
vi index.html   <h1>hello volume !!!</h1>

docker 自定义镜像
docker build -t 镜像名称:[tag] .
创建一个Dockerfile文件
常用内容:
from  指定当前自定义镜像依赖的环境
copy  将相对路径下的内容复制到自定义镜像中
workdir  声明默认工作目录
cmd  需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）

例：dockerfile      拷贝ssm.war到同级目录
from daocloud.io/library/tomcat:8.5.15-jre8
copy ssm.war /usr/local/tomcat/webapps

mkdir ssm-tomcat
cd ssm-tomcat
拷贝dockerfile和ssm.war
docker build -t ssm-tomcat:1.0.0  .

将容器打包成镜像
docker commit -a "runoob.com" -m "my apache" 容器名称或id 打包的镜像名称:标签 
OPTIONS说明： 
-a :提交的镜像作者； 
-c :使用Dockerfile指令来创建镜像； 
-m :提交时的说明文字； 
-p :在commit时，将容器暂停。


实例应用：
1、准备MySQL容器
docker rum -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=wj daocloud.io/library/mysql:5.7.4
2、准备Tomcat容器
docker cp ssm.war fe:/usr/local/tomcat/webapps/
docker logs -f 容器id

tomcat配置文件路径： /usr/local/tomcat/conf/
tomcat默认网站路径：/usr/local/tomcat/webapps(/ROOT/）
nginx配置文件路径： /etc/nginx/conf.d
nginx默认网站路径： /usr/share/nginx/html
mysql配置文件路径： /etc/mysql/conf.d
mysql数据目录： /var/lib/mysql

docker-compose:
1、下载   从github上下载：https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64
剪切到/usr/local/bin/改名并赋执行权限 
mv docker-compose-Linux-x86_64  docker-compose
chmod 777 docker-compose
配置环境变量
vi /etc/profile
最后增加:
export PATH=/usr/local/bin:$PATH
重新加载:
source /etc/profile
或者：ln -s  /usr/local/chaosblade-0.5.0/blade  /usr/bin
2、示例：
docker-compose 管理mysql和tomcat容器
yml文件以key: value的方式指定配置信息，多个配置信息以换行+缩进方式来区分  禁用TAB键
docker-compose使用默认数据卷路径时需要写全默认路径 如：- /var/lib/docker/volumes/nginx-conf:/etc/nginx/conf.d

docker-compose.yml
version: '3.1'
services:
  mysql:     #服务名称
    restart: always          #跟随启动
    image: daocloud.io/library/mysql:5.7.4   #拉取镜像
    container_name: mysql  #指定容器名称
    ports:
      - 3306:3306    #端口号的映射
    environment:
      MYSQL_ROOT_PASSWORD: root    #指定root的密码为root
      TZ: Asia/Shanghai
    volumes:
      - /opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql   #映射数据卷
  tomcat:     #服务名称
    restart: always          #跟随启动
    image: daocloud.io/library/tomcat:8.5.15-jre8   #拉取镜像
    container_name: tomcat  #指定容器名称
    ports:
      - 8080:8080    #端口号的映射
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps   #映射数据卷
      - /opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs

docker-compose配合Dockerfile文件一起使用
#docker-compose.yml
version: '3.1'
servers:
  ssm:
    restart: always
    build:
      context: ../
      dockerfile: Dockerfile
    image: ssm:1.0.1
    container_name: ssm
    ports:
      - 8081:8080
    environment:
      TZ: Asia/Shanghai

#Dockerfile
from daocloud.io/library/tomcat:8.5.15-jre8
copy ssm.war /usr/local/tomcat/webapps

mkdir  docker_ssm
touch Dockerfile
cp ssm到Dockerfile同级目录
mkdir  docker-compose
touch docker-compose.yml  
  
docker-compose up -d

如果自定义镜像不存在，会帮我们构建，如果存在则会直接运行
如需重新构建的话 则 docker-compose build
运行前重新构建 则  docker-compose up -d --build

version: '3.1'
services:
  nginx:
    restart: always
    image: daocloud.io/library/nginx:1.13.2
    container_name: nginx
    ports:
      - 80:80
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /var/lib/docker/volumes/nginx-conf:/etc/nginx/conf.d
      - /var/lib/docker/volumes/nginx-html:/usr/share/nginx/html
  mysql:     
    restart: always         
    image: daocloud.io/library/mysql:5.7.4   
    container_name: mysql 
    ports:
      - 3306:3306    
    environment:
      MYSQL_ROOT_PASSWORD: root    
      TZ: Asia/Shanghai
    volumes:
      - /var/lib/docker/volumes/mysql-data:/var/lib/mysql   
  tomcat:     
    restart: always          
    image: daocloud.io/library/tomcat:8.5.15-jre8  
    container_name: tomcat  
    ports:
      - 8080:8080    
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /var/lib/docker/volumes/tomcat-webapps:/usr/local/tomcat/webapps   
      - /var/lib/docker/volumes/tomcat-logs:/usr/local/tomcat/logs

3、docker-compose常用命令
启动  docker-compose up -d
关闭并删除  docker-compose down
启停重已存在的由docker-compose管理的容器 docker-compose start|stop|restart
查看 docker-compose ps
查看日志 docker-compose logs -f

修改docker默认网卡（docker0）IP
第一步 删除原有配置
sudo service docker stop
sudo ip link set dev docker0 down
sudo brctl delbr docker0
sudo iptables -t nat -F POSTROUTING
第二步 创建新的网桥
sudo brctl addbr docker0
sudo ip addr add 172.17.10.1/24 dev docker0
sudo ip link set dev docker0 up
第三步 配置Docker的文件
注意： 这里是 增加下面的配置
vi /etc/docker/daemon.json
[root@bogon ~]# cat /etc/docker/daemon.json  ##追加的即可
{
    "bip": "172.17.10.1/24"
}

安装zerotier-one配置MOON服务器
1. 首先需要和普通设备一样，下载并安装ZeroTier:
curl -s https://install.zerotier.com/ | sudo bash
或
curl -s 'https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg' | gpg --import && \
if z=$(curl -s 'https://install.zerotier.com/' | gpg); then echo "$z" | sudo bash; fi
安装完成后得到一个ID：*** Success! You are ZeroTier address [ 9c960b9ac2 ]
2. 加入网络：
sudo zerotier-cli join af78bf9436e20712
200 join OK
3.进入ZeroTier的默认安装目录，生成moon配置文件：
cd /var/lib/zerotier-one
sudo zerotier-idtool initmoon /var/lib/zerotier-one/identity.public >> moon.json
bash: moon.json: Permission denied
sudo su
zerotier-idtool initmoon identity.public > moon.json
注意，这里如果使用sudo命令提示权限不够，需要使用sudo su命令切换到root用户进行操作，才能生成moon.json文件。
4.修改moon.json文件。
生成的文件样式如下：
 "id": "9c960b9ac2",
 "objtype": "world",
 "roots": [
  {
   "identity": "9c960b9ac2:0:daca38dfc5f3a5e2113178cbecda4b741c85cc3aa6fff9ab86285146bb0c7030a604be1d8fc5489bb54a30c30933ae1a700fb9197cd3905eb8e230200e68f3c8",
   "stableEndpoints": []
  }
 ],
 "signingKey": "676f0c29eb8d6f2f00ce22ee2082b3ec15b21e95dd2f1305d5066c43372c4060fe34379de508b4ecfbcff768629b6e217c07228f80687f77970bfd87b067ed6c",
 "signingKey_SECRET": "39de9f7ab16d0adb035276b7281f73344a0df8af59cf937d4b032078037fd0f97c1006e050c2805882a6807cb636240de1a49797580a24b575ad7d944a17613d",
 "updatesMustBeSignedBy": "676f0c29eb8d6f2f00ce22ee2082b3ec15b21e95dd2f1305d5066c43372c4060fe34379de508b4ecfbcff768629b6e217c07228f80687f77970bfd87b067ed6c",
 "worldType": "moon"
}
这里我们需要根据自己服务器的公网静态IP，修改stableEndpoints那一行格式如下，其中47.96.39.181为你的公网IP，9993是默认的端口号：
"stableEndpoints": ["47.96.39.181\9993"]
5. 根据之前修改的moon.json文件生成真正需要的签名文件：
root@daweibro:/var/lib/zerotier-one# zerotier-idtool genmoon moon.json
wrote 0000009c960b9ac2.moon (signed world with timestamp 1580398410930)
可以看到生成的文件名称是和服务器之前是到的ID是对应的。
6.创建moons.d文件夹，并把签名文件移动到文件夹内：
sudo mkdir moons.d
sudo mv 0000009c960b9ac2.moon moons.d/
7.只需要重启ZeroTier服务就好了，没必要重启电脑，service zerotier-one restart或systemctl restart zerotier-one。至此，moon服务器的配置全部完成。
8.其他机器加入moon服务器，必须要在本地加入之前生成的moon签名文件并重启服务才能生效。
有两种方法。
1、在本机的Zerotier安装目录创建moons.d文件夹，然后下载该签名文件放在创建的moons.d目录里,重启服务。
2、直接使用命令zerotier-cli orbit ：
sudo zerotier-cli orbit 9c960b9ac2 9c960b9ac2
200 orbit OK
sudo service zerotier-one restart
zerotier-one stop/waiting
zerotier-one start/running, process 18347
sudo zerotier-cli listpeers
200 listpeers     
200 listpeers 34e0a5e174 147.75.92.2/9993;3061;2939 123 - PLANET
200 listpeers 3a46f1bf30 185.180.13.82/9993;7565;7794 271 - PLANET
200 listpeers 778cde7190 103.195.103.66/9993;7566;7693 373 - PLANET
200 listpeers 992fcf1db7 195.181.173.159/9993;3063;7158 396 - PLANET
200 listpeers 9c960b9ac2 121.41.23.39/9993;3052;3052 11 1.4.6 MOON
200 listpeers af415e486f 35.236.47.35/31469;3063;7873 192 1.4.1 LEAF
上面可见，moon服务器已经可以被其他常规节点访问到了。
查看自己的id:    zerotier-cli info

开机自启命令:
systemctl enable smb nmb

nmcli con show  # 查看网卡UUID
uuidgen ens33  #生成新的UUID
systemctl restart network

防火墙的开启和关闭：
查看防火墙状态  systemctl status firewalld 　　 #Active: inactive (dead) --表示防火墙已经关闭
临时关闭防火墙  systemctl stop firewalld
临时打开防火墙  systemctl start firewalld
永久防火墙关闭  systemctl disable firewalld
防火墙开机启动  systemctl enable firewalld
SELinux的开启和关闭
查看SELinux状态
getenforce　　　　　　　　#permissive模式是临时关闭，enforcing模式是临时打开，disabled模式是永久关闭
/usr/sbin/sestatus -v 　　 　#如果SELinux status参数为enabled即为开启状态
临时关闭SELinux  setenforce 0   临时打开SELinux  setenforce 1
永久关闭SELinux    
sed -i '7s/SELINUX=enforcing/SELINUX=disable/g'  /etc/selinux/config   需要重启机器.

创建一个让root都无法删除的黑客文件：
文件系统扩展属性： chattr    lsattr     文件的高级权限
+a 只能追加内容    +i  不能被修改
chattr +a  +i a.txt
chattr -a  -i  a.txt
lsattr  a.txt

建立samba共享（两种方式  用户共享   文件夹共享）
yum -y install samba*
启动Samba服务
systemctl start smb nmb
开机自启动：
systemctl enable smb nmb
防火墙开放samba和samba-client服务
firewall-cmd --permanent --add-service=samba
firewall-cmd --permanent --add-service=samba-client
重启防火墙：
firewall-cmd --reload
查看防火墙：
firewall-cmd --list-all

Samba服务器有两个重要的服务，SMB和NMB
SMB：是Samba的主要文件，基于TCP的139和445端口，通过SMB服务启动smbd服务
NMB：是一种类似于DNS的功能，作用是把linux系统共享的工作组名称与其IP对应起来，否则只能通过IP来访问文件。
          NMB服务器会启动nmbd服务，默认使用UDP的137和138端口
rpm -qi samba
rpm -qa | grep samba
rpm -e 软件名   卸载
rpm -e --nodeps 软件名   #卸载不成功时使用此命令强制卸载
whereis samba
which samba
find / | grep samba  或者 find / | grep smb.conf
find . -name 'my*'
yum -y install mlocate 先updatedb数据库再locate 
locate /etc/sh  搜索etc目录下所有以sh开头的文件。
locate ~/m  搜索用户主目录下，所有以m开头的文件。
locate -i ~/m  搜索用户主目录下，所有以m开头的文件，并且忽略大小写。
yum  remove nginx
1、用户共享
useradd wujun
password wujun
userdel  -r  wujun  删除用户  -r 连同用户家目录一起删除
smbpasswd -a wujun  添加已有系统中的用户
cd /etc/samba  
vi smb.conf
修改[homes]中writable = yes
在[homes]中添加：
create mask = 0664
force create mode = 0664
directory mask = 0775
force directory mode = 0775
说明：
默认创建文件是-rw-rw-r-- 664权限
默认创建目录是rwxrwxr-x 775权限
systemctl restart smb
访问方法： \\ip\wujun   即可进入wujun家目录
2、文件夹共享  
修改配置vim /etc/samba/smb.conf 在最后增加条目
[centosshare]
        comment=public file
        path=/centosshare     目录位置名称可以不同
        browseable=yes
        writable=yes
其中：
　　　　comment 　　　　　　　　　　　　 / / 任 意 字 符 串 ， 对 共 享 的 描 述 　　　　　
　　　　path = /centosshare　　　　　　　/ / 共 享 目 录 路 径 
　　　　browseable = yes/no 　　　　　　/ / 指 定 该 共 享 是 否 可 以 浏 览 
　　　　writable = yes/no 　　　　　　　 / / 指 定 该 路 径 是 否 可 写 
　　　　available = yes/no　　　　　　　/ / 该 共 享 资 源 是 否 可 用 
　　　　valid users = 用 户 1 ， 用 户 2 　/ / 允 许 访 问 该 共 享 资 源 的 用 户
　　　　invalid users = 用 户 1 ， 用 户 2 / / 禁 止 访 问 该 共 享 资 源 的 用 户
　　　　write list = 用 户 1 ， 用 户 2 　　/ / 可 以 在 共 享 目 录 下 写 入 文 件 的 用 户 
　　　　public = yes/no　　　　　　　　/ / 指 定 guest 是 否 可 以 共 享 文 件 
mkdir /centosshare     添加共享文件夹
chmod -R 777 /centosshare   给文件夹赋权
#chmod +r xxx文件   给文件赋执行权限
systemctl  restart smb
访问方法： \\ip\centosshare
source /etc/profile  重新加载profile文件

Nginx常用命令
nginx -s stop   立刻停止
nginx -s reload  重新加载配置文件
nginx -s quit  平滑停止
nginx -t  测试配置文件是否正确
查看版本：nginx -v
查看nginx安装目录：ps  -ef | grep nginx
检查配置文件：nginx -t
启动：systemctl start nginx.service
停止：systemctl stop nginx.service
重启：systemctl restart nginx.service
设置开机自启动：systemctl enable nginx.service
停止开机自启动：systemctl disable nginx.service
查看当前状态：systemctl status nginx.service
查看所有已启动的服务：systemctl list-units --type=service

nginx反向代理  只起代理作用，不做动静分离
server {
    listen       80;
    server_name  localhost;
    location / {
        proxy_pass   http://172.21.0.3:8080;
    }  
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
nginx配置前端访问本地文件夹
location  /wj {
	root  /usr/share/nginx/html;
	autoindex on;
        }
nginx反向代理tomcat时无法加载js/css/时的增加配置
location ~ .*\.(js|css)$ {
             proxy_pass http://127.0.0.1:8080;
         }

nginx支持php须在server块里增加一个location：
location / {
	root   /usr/share/nginx/html;
	index  index.html index.htm index.php;
 }
location ~ \.php$ {
	root   /usr/share/nginx/html;
	fastcgi_pass   127.0.0.1:9000;
	fastcgi_index  index.php;
	fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
	include        fastcgi_params;
 }

使用浏览器查看很简单，只需要在网站目录创建一个PHP文件，使用上面提到的phpinfo()函数，如：
<?php
phpinfo();
?>

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;   
    #有这一行可在/etc/nginx/conf.d/写server块，不必在nginx.conf中增加server块

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;
       #有这一行可在/etc/nginx/default.d/写location块，不必在nginx.conf中增加location块
        location / {
              root html;
             index  index.html  index.htm;
        }

        error_page 404 /404.html;
        location = /404.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
    }


server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;
    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

rpm -ivh 包名  -e 删除
tar -xzvf test.tar.gz  解压test文件
tar -czvf test.tar.gz  a.txt  压缩a.txt到test
tar -tzvf test.tar.gz  列出压缩文件内容
rpm -q zip unzip
zip -r  mnt.zip mnt    -r压缩文件夹  -q不显示过程
unzip -c mnt.zip
unzip -o common.war -d common     -o 不询问是否覆盖  -d 指定目录

centos系统java环境变量配置:
tar -xzvf jdk-linux-x64.tar.gz 
vi /etc/profile
export JAVA_HOME=/usr/local/jdk-15
(export JRE_HOME=$JAVA_HOME/jre)
export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib(:$JRE_HOME/lib)
export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
source /etc/profile

临时挂载ISO文件：
mount -o loop /software/rhel64.iso /mnt/yum
卸载：umount /mnt/yum
开机自动挂载：
/etc/fstab文件，追加写入信息
/software/rhel64.iso  /mnt/yum  iso9660 loop  0 0
执行mount -a命令，挂载验证  
df -Th 查看

查看已安装软件的路径：
whereis nginx
查看端口情况：
yum -y install net-tools
yum  -y install lsof
netstat -tunlp | grep 80
lsof -i:80

windows部分

cmd拷贝文件到远程主机：
1、net use \\161.189.189.31\ipc$ WJ111888wj /user:administrator
2、xcopy /s  2\*.*  \\161.189.189.31\share\2     /s 连同文件夹一起拷贝 除非空文件夹
3、net view \\47.96.39.181
4、net share 查看共享  如：C盘共享  share文件夹共享
net use h: \\10.147.18.181\c$ WJ111888wj /user:administrator  映射c盘到本地h:盘  
net use i: \\10.147.18.181\share WJ111888wj /user:administrator  映射share文件夹到本地i:盘

compmgmt.msc  计算机管理
devmgmt.msc   设备管理器
control   控制面板
msconfig   系统配置实用程序
regedit   注册表
gpedit.msc   组策略
services.msc  找需要重启的服务
taskmgr    关闭进程
secpol.msc  本地安全策略
cleanmgr  磁盘清理
cmd命令关闭防火墙：
NetSh Advfirewall set allprofiles state off  #关闭防火墙
Netsh Advfirewall show allprofiles            #查看防火墙状态

使用cmd命令关闭defender: 
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /d 1 /t REG_DWORD /f

开启共享文件夹设置：
shrpubw

查看本机共享
net share

1、用netstat查看网络端口使用情况
netstat -ano  | findstr  /I  80   -ano  全部 数字形式显示地址端口号 进程ID  /I 不区分大小写
2、net用于打开没有被禁用的服务
启动和关闭服务的时候，其语法是：
net start 服务名
net stop 服务名
net start zerotieronservice
net stop zerotieronservice
3、用sc可打开被禁用的服务。(也可以查看服务状态)可以创建服务、删除服务、打开与关闭服务
sc是用于与服务控制管理器和服务进行通信的命令行程序，其语法是：
sc config  服务名 start= demand     //手动 start= 后须有一空格
sc config  服务名 start= auto       //自动
sc config  服务名 start= disabled //禁用
sc start   服务名　　开启服务
sc stop    服务名　　停止服务
sc query   服务名　　查看服务状态  如running
例： sc query | findstr /I ze*
sc delete  服务名    删除服务
sc qc      服务名      查看服务的配置信息  如auto-start
sc create scname binPath= c:/aaa/xxx.exe　　创建服务  注意：binPath= 后须有一空格
4、用net user查看计算机上有些什么用户 
net user 用户名: 查看这个用户的权限的，一般除了Administrator是administrators组的，其他都不是!  
net user username passwd /add: 增加用户(passwd必须为系统预设的格式，系统可预设密码格式) 
net user 用户名 /del: 删掉用户 
net localgroup administrators sstily /add:增加管理员权限

1、运行: slmgr.vbs -dli 命令 可以查询到操作系统版本、部分产品密钥、许可证...
2、运行:slmgr.vbs -xpr 命令 可以查询Win10是否永久激活。
3、运行:slmgr.vbs /upk 命令;卸载激活密钥

gpedit.msc  
计算机配置-windows设置-安全设置-本地策略-安全选项
帐户: 使用空密码的本地帐户只允许进行控制台登录

计算机配置-windows设置-安全设置-帐户策略-密码策略
策略：密码必须符合复杂性要求  禁用

计算机配置-管理模板-windows组件-windows defender 
关闭windows defender防病毒程序  启用

计算机配置-管理模板-windows组件-系统
显示“关闭事件跟踪程序” 已禁用

Windows设置多用户同时远程登录
计算机配置-->管理模板--->windows组件--->远程桌面服务--->
远程桌面会话主机--->
“连接"--->"将远程桌面服务用户限制到单独的远程桌面服务会话”禁用。
“连接"--->“限制连接的数量”已启用  连接数量自己选。

获取已连接的无线密码：
netsh wlan show profile
netsh wlan export profile folder=c:\ key=clear
type c:\WLAN-Redmi_DF3E.xml

echo 123 >> c:\1.txt  追加写入

查看计算机中的所有.exe程序：
%windir%\explorer.exe shell:::{4234d49b-0245-4df3-b780-3893943456e1}

查看本机详细信息：
systeminfo  winver  nslookup  ipconfig /all  calc   notepad  mspaint  mstsc  nslookup

修改IP、DNS：
netsh interface ip set address name="连接名称" source=static addr=192.168.31.14 mask=255.255.255.0 gateway=192.168.31.1  gwmetric=1
netsh interface ip set address "连接名称" static 192.168.31.14  255.255.255.0  192.168.31.1  1
netsh interface ip set address "连接名称" dhcp
netsh interface ip set dns name="连接名称" source=static addr=223.5.5.5 register=primary
netsh interface ip set dns "连接名称"  static 223.5.5.5  primary   添加DNS
netsh interface ip add dns "连接名称"  223.6.6.6       再添加一个DNS
netsh interface ip set dns "连接名称" dhcp

netsh interface set interface "本地连接" disabled
netsh interface set interface "本地连接" enabled


shutdown -r -t 0  重启
shutdown -s -t 0  关机
net use \\161.189.189.31\ipc$ WJ111888wj /user:administrator  先建立远程空连接
shutdown -r -m \\161.189.189.31 -t 0   远程重启

@ echo off
net stop zerotieroneservice
ping -n 2 127.0.0.1>nul
echo ---------------------------------------------------
net start  zerotieroneservice
ping -n 5 127.0.0.1>nul

找回误删除的文件：（未进行磁盘清理）
切换到HEKEY_LOCALMACHINE/SOFTWARE/microsoft/windows/
CURRENTVERSION/EXPLORER/DESKTOP/下的NAMESPACE，
在NAMESPACE下新建项{645FFO40-5081-101B-9F08-00AA002F954E} "默认"字样双击，把“数值数据”设为“回收站”，
然后退出注册表，重启计算机.

Win10镜像重装提示计算机意外的重启或du遇到错误解决方法:
同时按shift+F10 打开dao命令窗口，进入到C:/windows/system32/oobe文件夹，输入msoobe 回车，
然后输入msoobe进入下一步，不用理会错误提示框。按照屏幕提示输入相应的信息直至完成系统的安装即可。

windows系统java配置环境变量：
1、右键桌面上“我的电脑”>>“属性”，在弹出的页面上点击“高级系统设置”。
2、在弹出的“系统属性”窗口中“高级”标签页下点击“环境变量”按钮。
3、在弹出的“环境变量”窗口中，点击下方的“新建”按钮，在弹出的“新建系统变量”窗口中，新建一个名为“JAVA_HOME”的环境变量，变量值为Java的安装路径，本人为：D:\project\tool\Java\jdk_9.0.1。如图所示。
4、设置Path环境变量，该变量已经存在，选择Path，点击下方的“编辑”按钮，在弹出的窗口中添加如下信息：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin，然后点击“确认”按钮即可。如图所示：
5、和JAVA_HOME一样，新建一个名为“classpath”的环境变量，变量值为：%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar。如图所示：
6、在配置好环境变量后，可以进入cmd中检查Java是否安装正确，检查的命令为 java -version

戴尔DELL新BIOS选择Legacy模式：F2键进入BIOS设置
1：Security--PTT Security中“PTT On”取消打钩。
2：Secure Boot---Secure Boot Enable中，选择“Disabled”。
3：General---Advanced Boot Options 中，在Enable Legacy Option ROM前打钩，保存一下设置。
4：General---Boot Sequence 中，选择“Legacy"模式。
保存、重启，然后开机按F12选择U盘启动。

LENOVO联想新BIOS选择Legacy模式：F2键进入BIOS设置
1:Security--secure boot:disabled
2:exit--os optimized defaults:disabled 
3:boot--boot mode legacy only  
4:boot--csm:enabled  开启兼容模式


github仓库的用法：
初始化全局配置信息：
git config --global user.name 'wj5811github'
git config --global user.email 'wj5811@163.com'
git config --list   查看配置信息
git config --global -e    修改git全局配置文件

新建代码仓库并初始化：
mkdir test 
cd  test
进入到test仓库内初始化：
git init  生成一个.git隐藏文件
touch a1.php
git status
git add hello.php  提交到暂存区
git commit -m '提交描述'  提交到本地git仓库

vi a1.php

rm -rf a1.php  删除本地文件
git rm a1.php 删除本地git仓库上的文件
git commit -m '描述'

先clone github仓库上的地址  从github仓库下载到本地
git clone   https://github.com/wj5811github/linux-windows.git
进入地址对应的仓库再push
git push  文件名   推送到github远程服务器上
注意：git命令行窗口的路径很重要，要在仓库内操作命令（cd  XXX/），否则push不上去！
没有权限无法同步的解决办法：
vi .git/config
[remote "origin"]
   url=https://wj5811github:Wj111888wj@github.com/用户名/仓库名.git
 搭建网站
https://wj5811github.github.io
新建仓库wj5811github.github.io-->新建index.html-->用浏览器就可以访问了
<h1><a href=https://github.com/wj5811github?tab=repositories>我的github仓库</h1>
<h2><a href=https://github.com/wj5811github/linux-windows/blob/master/nignx.txt>nignx.txt</h2>   从主页建立其它仓库的链接
其它仓库网站设置 进入仓库--settings--github pages--master--save